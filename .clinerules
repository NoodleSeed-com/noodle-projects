# Project Configuration (.clinerules)

## Memory Bank Index
- projectbrief.md: Core requirements, goals, project scope
- productContext.md: Business logic, user experience, problem domain
- activeContext.md: Current work state, recent changes, next steps
- systemPatterns.md: Architecture, technical decisions, design patterns
- techContext.md: Tech stack, setup, constraints, dependencies
- progress.md: Project status, working features, known issues

## Project Overview
- Type: FastAPI Microservice
- Created: 2024-02-22
- Location: /Users/fahdrafi/VSCode/noodle-projects

## Development Standards

### Code Style
- Follow FastAPI and Pydantic v2 best practices
- Use type hints throughout
- Document all functions and classes
- Follow PEP 8 guidelines

### Test Organization Standards
- Co-located tests with source code
- Clear test file naming (test_*.py)
- Unit tests with source code, integration tests in api/tests/
- Comprehensive test documentation

### Database Test Setup
- Use separate test database
- Handle foreign key constraints
- Proper transaction isolation
- Clean state between tests

### CRUD Module Organization
- Split large CRUD modules into packages
- Maintain clear public interface in __init__.py
- Separate responsibilities into dedicated files
- Keep files under 5,000 bytes when possible

### API Design
- RESTful endpoints
- Clear resource hierarchy
- Consistent response formats
- Proper status code usage

### API Endpoints
- `GET /health` - Health check
- `GET /api/projects/` - List projects
- `POST /api/projects/` - Create project
- `GET /api/projects/{project_id}` - Get project
- `PUT /api/projects/{project_id}` - Update project
- `DELETE /api/projects/{project_id}` - Soft delete project
- `GET /api/projects/{project_id}/versions/` - List versions
- `GET /api/projects/{project_id}/versions/{version_number}` - Get version
- `POST /api/projects/{project_id}/versions/` - Create version

### Error Handling
- Use NoodleError as standard application error
- Map error types to appropriate HTTP status codes
- Validate inputs using NoodleError
- Document error conditions

## CLI Commands

### Development Server
```bash
# Start development server
DATABASE_URL=postgresql+asyncpg://postgres:postgres@127.0.0.1:54342/postgres uvicorn api.app.main:app --reload
```

### Database
```bash
# Apply migrations
supabase db reset

# Start/Stop Supabase
supabase start
supabase stop
```

### Testing
```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=api/app api/tests/ -v

# Run specific test category
pytest api/app/models/tests/ -v
```

## Project Structure
```
/
├── api/                      # FastAPI service
│   ├── app/
│   │   ├── config.py        # App & DB configuration
│   │   ├── main.py         # FastAPI app setup
│   │   ├── models/         # SQLAlchemy models
│   │   ├── routes/         # API endpoints
│   │   ├── schemas/        # Pydantic models
│   │   └── services/       # Business logic
│   ├── tests/              # Integration tests
│   └── requirements.txt
├── supabase/               # Database
└── cline_docs/             # Memory Bank location
```

## Environment Variables
Required in api/.env:
```
DATABASE_URL=postgresql://[user]:[password]@[host]:[port]/[database]
OPENROUTER_API_KEY=[key]  # Required for AI code generation
```
