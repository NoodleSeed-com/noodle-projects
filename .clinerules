# Project Configuration (.clinerules)

## Project Overview
- Type: FastAPI Microservice
- Created: 2024-02-22
- Location: /Users/fahdrafi/VSCode/noodle-projects

## Development Standards

### Code Style
- Follow FastAPI and Pydantic v2 best practices
- Use type hints throughout
- Document all functions and classes
- Follow PEP 8 guidelines

### Test Organization Standards
1. Co-located Tests:
   ```
   api/app/[module]/
   ├── __init__.py
   ├── module.py
   └── tests/
       ├── __init__.py
       ├── conftest.py
       └── test_*.py
   ```

2. Test File Naming:
   - test_*.py for test files
   - conftest.py for fixtures
   - Clear relationship to tested code

3. Test Categories:
   - Unit tests with source code
   - Integration tests in api/tests/
   - Common utilities in api/tests/common/

4. Test Documentation:
   - Clear docstrings
   - Verification points
   - Setup requirements
   - Expected outcomes

### Database Test Setup
1. Test Database Requirements:
   - Use separate test database
   - Handle foreign key constraints
   - Proper transaction isolation
   - Clean state between tests

2. Fixture Hierarchy:
   ```python
   @pytest.fixture(scope="session")
   def test_engine():
       """Database engine for tests."""
       
   @pytest.fixture(scope="module")
   def test_db(test_engine):
       """Module database from engine."""
       
   @pytest.fixture
   def db_session(test_db):
       """Test transaction from database."""
   ```

3. Test Isolation:
   - Use transaction savepoints
   - Rollback after each test
   - No shared state
   - Clean resources

4. Error Handling:
   - Proper constraint handling
   - Transaction management
   - Resource cleanup
   - State reset

5. SQLAlchemy Session Management:
   ```python
   # Create and commit
   db_session.add(project)
   db_session.commit()
   db_session.refresh(project)  # Reload to get generated values
   
   # Verify state after commit
   assert len(project.versions) == 1
   initial_version = project.versions[0]
   ```

6. Event Listener Testing:
   - Use commit() to trigger after_insert events
   - Refresh objects after commit to load relationships
   - Verify event results after commit
   - Example:
   ```python
   # Create project triggers version creation
   project = Project(name="Test")
   db_session.add(project)
   db_session.commit()
   db_session.refresh(project)
   
   # Verify event created version
   assert len(project.versions) == 1
   assert project.versions[0].version_number == 0
   ```

7. Common Pitfalls:
   - Using flush() when commit() is needed for events
   - Not refreshing after commits
   - Duplicate version numbers
   - Missing relationship loads
   - Not handling unique constraints

### CRUD Module Organization
1. Package Structure:
   - Split large CRUD modules (>10,000 bytes) into packages
   - Example structure:
     ```
     api/app/crud/[module]/
     ├── __init__.py      # Public interface
     ├── crud.py          # Core operations
     └── [feature].py     # Specific features
     ```
   - Keep files under 5,000 bytes when possible
   - Maintain clear public interface in __init__.py

2. Responsibility Separation:
   - Core CRUD operations in crud.py
   - Feature-specific logic in dedicated files
   - Clear separation of concerns
   - Single responsibility per module

3. Implementation Requirements:
   - Document module responsibilities
   - Use __init__.py to expose public API
   - Maintain backward compatibility
   - Follow consistent naming patterns
   - Add proper type hints and docstrings

4. When to Apply:
   - CRUD modules over 10,000 bytes
   - Multiple distinct responsibilities
   - Complex validation logic
   - Separate concerns exist
   - Testing would benefit from separation

### API Design
- RESTful endpoints
- Clear resource hierarchy
- Consistent response formats
- Proper status code usage

### Database
- Use UUID primary keys
- Enable Row Level Security
- Implement soft deletion through active flag
- Maintain referential integrity
- Use appropriate indexes

### Documentation
- Document all schema changes
- Keep API documentation up to date
- Document design decisions

### Response Patterns
- Use Pydantic models for all responses
- Keep SQLAlchemy models separate from response DTOs
- Include complete object graphs in detailed responses
- Use simplified responses for list endpoints
- Document all response fields and their types

### Version Control
- Use meaningful commit messages
- Document breaking changes
- Follow semantic versioning
- Track version relationships

### Testing
- Write unit tests for API endpoints
- Test database operations
- Validate schema constraints
- Test error handling

### Service Integration Standards
1. Dependency Injection:
   - Define service dependencies at module level
   - Use get_* functions for FastAPI dependencies
   - Import dependencies, not service instances

2. Service Testing:
   - Mock services through dependency injection
   - Override dependencies in test fixtures
   - Clear overrides after tests
   - Use flexible assertion patterns

3. Service Context:
   - Pass relevant context to services
   - Include current state in service calls
   - Document required context parameters

### Service Error Handling
1. Status Code Mapping:
   - 400: Validation errors (ValueError)
   - 403: Inactive project operations
   - 404: Resource not found
   - 409: Integrity constraint violations
   - 422: Request validation errors
   - 503: Service unavailable

2. Service Layer:
   - Validate inputs before processing
   - Raise appropriate exceptions
   - Maintain consistent error messages
   - Document error conditions

3. Error Propagation:
   - Catch errors at appropriate layer
   - Convert to HTTP status codes
   - Maintain transaction integrity
   - Roll back on failure

4. Testing Requirements:
   - Test all error paths
   - Verify error propagation
   - Check transaction rollback
   - Validate error responses
   - Mock service errors

## Project Dependencies
- Python 3.11+
- FastAPI
- SQLAlchemy
- Pydantic v2
- PostgreSQL
- Supabase

## Best Practices

### API Implementation
- Implement proper validation
- Handle errors consistently
- Use dependency injection

### Database Operations
- Use connection pooling
- Implement transactions
- Handle concurrent access
- Optimize queries

### Security Guidelines
- Validate all inputs
- Use environment variables
- Implement proper access controls
- Regular security audits

### Error Handling
1. NoodleError Pattern:
   - Use NoodleError as the standard application error
   - All application-level validations should raise NoodleError
   - Include error type and message in NoodleError
   - Tests should expect NoodleError for application validations
   - Only catch external errors (e.g., SQLAlchemy, FastAPI)

2. Status Code Mapping:
   - 400: NoodleError (ErrorType.VALIDATION)
   - 403: NoodleError (ErrorType.PERMISSION)
   - 404: NoodleError (ErrorType.NOT_FOUND)
   - 409: IntegrityError (from SQLAlchemy)
   - 422: RequestValidationError (from FastAPI)
   - 503: NoodleError (ErrorType.DATABASE)

3. Service Layer:
   - Validate inputs using NoodleError
   - Convert external errors to NoodleError when appropriate
   - Maintain consistent error messages
   - Document error conditions
   - Use appropriate ErrorType

4. Error Propagation:
   - Catch errors at appropriate layer
   - Convert to HTTP status codes
   - Maintain transaction integrity
   - Roll back on failure

5. Testing Requirements:
   - Test all error paths
   - Use pytest.raises(NoodleError) for application validations
   - Check error types and messages
   - Verify error propagation
   - Test external error handling
   - Mock service errors

## CLI Commands

### Development Server
```bash
# Start development server
uvicorn api.app.main:app --reload

# Run with specific host/port
uvicorn api.app.main:app --host 0.0.0.0 --port 8000
```

### Database
```bash
# Apply migrations
supabase db reset

# Start Supabase
supabase start

# Stop Supabase
supabase stop
```

### Testing
```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=api/app api/tests/ -v

# Run specific test category
pytest api/app/models/tests/ -v                # Model tests
pytest api/app/routes/tests/ -v                # Route tests
pytest api/app/services/tests/ -v              # Service tests
pytest api/tests/integration_tests/ -v         # Integration tests

# Run with environment variables
env $(cat api/tests/unit_tests/test.env | grep -v '^#' | xargs) pytest
```

### Environment
```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
source venv/bin/activate  # Unix
venv\Scripts\activate     # Windows

# Install dependencies
pip install -r api/requirements.txt
```

## Project Structure
```
/
├── api/                      # FastAPI service
│   ├── app/
│   │   ├── __init__.py
│   │   ├── config.py        # App & DB configuration
│   │   ├── main.py         # FastAPI app setup
│   │   ├── models/         # SQLAlchemy models
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── file.py
│   │   │   ├── project.py
│   │   │   ├── version.py
│   │   │   └── tests/      # Model tests
│   │   ├── routes/         # API endpoints
│   │   │   ├── __init__.py
│   │   │   ├── projects.py
│   │   │   ├── versions.py
│   │   │   └── tests/      # Route tests
│   │   ├── schemas/        # Pydantic models
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── common.py
│   │   │   ├── file.py
│   │   │   ├── project.py
│   │   │   └── version.py
│   │   └── services/       # Business logic
│   │       ├── __init__.py
│   │       ├── openrouter.py
│   │       └── tests/      # Service tests
│   ├── tests/              # Integration tests
│   │   ├── __init__.py
│   │   ├── integration_tests/
│   │   └── common/
│   ├── requirements.txt
│   └── README.md
├── supabase/               # Database
│   ├── seed.sql
│   └── config.toml
└── cline_docs/             # Documentation
    ├── projectbrief.md
    ├── systemPatterns.md
    ├── techContext.md
    ├── productContext.md
    ├── activeContext.md
    ├── progress.md
    └── research.md
```

## Environment Variables
Required in api/.env:
```
DATABASE_URL=postgresql://[user]:[password]@[host]:[port]/[database]
OPENROUTER_API_KEY=[key]  # Required for AI code generation
