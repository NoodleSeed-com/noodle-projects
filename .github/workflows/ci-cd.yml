name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  OPENROUTER_BASE_URL: ${{ secrets.OPENROUTER_BASE_URL }}
  OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd api
          pip install -r requirements.txt
          
      - name: Install Supabase CLI
        run: |
          curl -L https://github.com/supabase/cli/releases/download/v1.145.4/supabase_1.145.4_linux_amd64.deb -o supabase.deb
          sudo dpkg -i supabase.deb
          rm supabase.deb
          
      - name: Start Supabase and run tests
        run: |
          cd api
          # Start Supabase
          supabase start
          
          # Wait for database to be ready
          while ! nc -z localhost 54322; do
            echo "Waiting for database..."
            sleep 1
          done
          
          # Apply migrations
          supabase db reset
          
          # Run unit tests first
          pytest app/models/tests/ app/routes/tests/ app/services/tests/ app/crud/tests/ app/schemas/tests/ -v --cov=app --cov-append
          
          # Then run integration tests with environment variables
          env $(cat tests/integration_tests/test.env | grep -v '^#' | xargs) pytest tests/integration_tests/ -v --cov=app --cov-append --cov-report=xml
          
          # Stop Supabase
          supabase stop
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Create deployment artifact
        run: |
          tar -czf deployment.tar.gz .vercel
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifact
          path: deployment.tar.gz

  deploy-dev:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
          
      - name: Extract build
        run: tar -xzf deployment.tar.gz
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes
          
      - name: Deploy to Dev
        id: deploy-dev
        run: |
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          echo "Deployed to Development: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
    outputs:
      deployment_url: ${{ steps.deploy-dev.outputs.deployment_url }}

  deploy-staging:
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
          
      - name: Extract build
        run: tar -xzf deployment.tar.gz
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes
          
      - name: Deploy to Staging
        id: deploy-staging
        run: |
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod)
          echo "Deployed to Staging: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
    outputs:
      deployment_url: ${{ steps.deploy-staging.outputs.deployment_url }}

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
          
      - name: Extract build
        run: tar -xzf deployment.tar.gz
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes
          
      - name: Deploy to Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod)
          echo "Deployed to Production: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
