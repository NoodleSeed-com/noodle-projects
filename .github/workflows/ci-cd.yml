name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  OPENROUTER_BASE_URL: ${{ secrets.OPENROUTER_BASE_URL }}
  OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 54322:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd api
          pip install -r requirements.txt
          
      - name: Setup test environment
        run: |
          cd api
          cp tests/unit_tests/test.env .env
          
      - name: Run unit tests with coverage
        env:
          TESTING: true
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:54322/postgres
          DB_HOST: localhost
          DB_PORT: 54322
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: postgres
        run: |
          cd api
          pytest app/models/tests/ app/routes/tests/ app/services/tests/ app/crud/tests/ app/schemas/tests/ -v --cov=app --cov-report=html --cov-report=term
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: api/htmlcov/
          retention-days: 14

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Create deployment artifact
        run: |
          tar -czf deployment.tar.gz .vercel
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifact
          path: deployment.tar.gz

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 54322:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
          
      - name: Extract build
        run: tar -xzf deployment.tar.gz
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes
          
      - name: Deploy to Staging
        id: deploy-staging
        run: |
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          echo "Deployed to Staging: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Set up Python for Integration Tests
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd api
          pip install -r requirements.txt

      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:54322/postgres
          TESTING: true
          DB_HOST: localhost
          DB_PORT: 54322
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: postgres
          API_HOST: 0.0.0.0
          API_PORT: 8000
          STAGING_URL: ${{ steps.deploy-staging.outputs.deployment_url }}
        run: |
          cd api
          pytest tests/integration_tests/ -v
    outputs:
      deployment_url: ${{ steps.deploy-staging.outputs.deployment_url }}

  deploy-production:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # Manual approval required before proceeding
    permissions:
      deployments: write
      contents: read
    steps:
      # Wait for manual approval
      - name: Manual Approval Check
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          timeout-minutes: 1440  # 24 hours
          
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact
          
      - name: Extract build
        run: tar -xzf deployment.tar.gz
          
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Link to Vercel Project
        run: |
          vercel link --token=${{ secrets.VERCEL_TOKEN }} --yes
          
      - name: Deploy to Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod)
          echo "Deployed to Production: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
